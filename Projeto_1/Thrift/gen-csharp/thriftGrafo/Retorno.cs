/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace thriftGrafo
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Retorno : TBase
  {
    private bool _sucesso;
    private string _mensagem;
    private string _retorno;

    public bool Sucesso
    {
      get
      {
        return _sucesso;
      }
      set
      {
        __isset.sucesso = true;
        this._sucesso = value;
      }
    }

    public string Mensagem
    {
      get
      {
        return _mensagem;
      }
      set
      {
        __isset.mensagem = true;
        this._mensagem = value;
      }
    }

    public string Retorno_
    {
      get
      {
        return _retorno;
      }
      set
      {
        __isset.retorno = true;
        this._retorno = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sucesso;
      public bool mensagem;
      public bool retorno;
    }

    public Retorno() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Sucesso = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Mensagem = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Retorno_ = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Retorno");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sucesso) {
          field.Name = "sucesso";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Sucesso);
          oprot.WriteFieldEnd();
        }
        if (Mensagem != null && __isset.mensagem) {
          field.Name = "mensagem";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mensagem);
          oprot.WriteFieldEnd();
        }
        if (Retorno_ != null && __isset.retorno) {
          field.Name = "retorno";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Retorno_);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Retorno(");
      bool __first = true;
      if (__isset.sucesso) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sucesso: ");
        __sb.Append(Sucesso);
      }
      if (Mensagem != null && __isset.mensagem) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mensagem: ");
        __sb.Append(Mensagem);
      }
      if (Retorno_ != null && __isset.retorno) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Retorno_: ");
        __sb.Append(Retorno_);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
